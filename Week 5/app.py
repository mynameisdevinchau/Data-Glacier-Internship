# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MGYYPuhy8zdDnNd7NYEfOEBONoGFMDyJ
"""

from flask import Flask, request, render_template
import numpy as np
import pandas as pd


from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
import pickle

from sklearn.datasets import load_iris

data = load_iris()
df = pd.DataFrame(data=data.data, columns=data.feature_names)
df['species'] = pd.Categorical.from_codes(data.target, categories=data.target_names)
df

"""Building the model"""

X = df.drop(['species'], axis=1)
y = df['species']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, train_size=0.70,test_size=0.30, random_state=0)
print(X_train.shape, X_test.shape)

randomForestClassifier = RandomForestClassifier(n_estimators=100, random_state=0)
randomForestClassifier.fit(X_train, y_train)

print('Random Forest Classifier')
print('Accuracy:', metrics.accuracy_score(y_test, randomForestClassifier.predict(X_test)))
print('Precision:', metrics.precision_score(y_test, randomForestClassifier.predict(X_test), average='weighted'))
print('Recall:', metrics.recall_score(y_test, randomForestClassifier.predict(X_test), average='weighted'))
print('F1-score:', metrics.f1_score(y_test, randomForestClassifier.predict(X_test), average='weighted'))

kNearestNeighbors = KNeighborsClassifier(n_neighbors=5)
kNearestNeighbors.fit(X_train, y_train)

print('K Nearest Neighbors')
print('Accuracy:', metrics.accuracy_score(y_test, kNearestNeighbors.predict(X_test)))
print('Precision:', metrics.precision_score(y_test, kNearestNeighbors.predict(X_test), average='weighted'))
print('Recall:', metrics.recall_score(y_test, kNearestNeighbors.predict(X_test), average='weighted'))
print('F1-score:', metrics.f1_score(y_test, kNearestNeighbors.predict(X_test), average='weighted'))

logisticRegression = LogisticRegression()
logisticRegression.fit(X_train, y_train)

print('Logistic Regression')
print('Accuracy:', metrics.accuracy_score(y_test, logisticRegression.predict(X_test)))
print('Precision:', metrics.precision_score(y_test, logisticRegression.predict(X_test), average='weighted'))
print('Recall:', metrics.recall_score(y_test, logisticRegression.predict(X_test), average='weighted'))
print('F1-score:', metrics.f1_score(y_test, logisticRegression.predict(X_test), average='weighted'))

with open('random_forest.pkl', 'wb') as file:
       pickle.dump(randomForestClassifier, file)

with open('knn.pkl', 'wb') as file:
       pickle.dump(kNearestNeighbors, file)

with open('logistic_regression.pkl', 'wb') as file:
       pickle.dump(logisticRegression, file)

app = Flask(__name__, template_folder='templates')

with open('random_forest.pkl', 'rb') as file:
    randomForestClassifier = pickle.load(file)

with open('knn.pkl', 'rb') as file:
    kNearestNeighbors = pickle.load(file)

with open('logistic_regression.pkl', 'rb') as file:
    logisticRegression = pickle.load(file)

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    int_features = [float(x) for x in request.form.values()]
    final_features = [np.array(int_features)]

    rfc_prediction = randomForestClassifier.predict(final_features)[0]
    knn_prediction = kNearestNeighbors.predict(final_features)[0]
    lr_prediction = logisticRegression.predict(final_features)[0]

    return render_template('index.html',
                           rfc_prediction=rfc_prediction,
                           knn_prediction=knn_prediction,
                           lr_prediction=lr_prediction)

if __name__ == "__main__":
    app.run(port=5000, debug=True)